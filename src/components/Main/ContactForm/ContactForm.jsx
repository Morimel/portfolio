import React, { useState } from "react";
import emailjs from "emailjs-com";
import "./ContactForm.scss";

import {
  PUBLIC_KEY,
  SERVICE_ID,
  TEMPLATE_ID,
  emailRegex,
} from "../../../utils/constants";

function ContactForm() {
  // –ü–æ–ª—è –≤–≤–æ–¥–∞
  const [name, setName] = useState("");
  const [email, setEmail] = useState("");
  const [message, setMessage] = useState("");
  // –í–∞–ª–∏–¥–∞—Ü–∏—è
  const [nameError, setNameError] = useState("");
  const [emailError, setEmailError] = useState("");
  const [emailRegExpError, setEmailRegExpError] = useState("");
  const [messageError, setMessageError] = useState("");
  const [showEmailError, setShowEmailError] = useState(false);
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ submit
  const [isSubmitted, setIsSubmitted] = useState(false);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ email-–∞–¥—Ä–µ—Å–∞
  const validateEmail = (email) => {
    return emailRegex.test(email.toLowerCase());
  };

  const handleSubmit = (event) => {
    event.preventDefault();

    let isFormValid = true;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª–µ "–ò–º—è" –Ω–µ –ø—É—Å—Ç–æ–µ
    if (!name) {
      setNameError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è");
      isFormValid = false;
    } else {
      setNameError("");
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª–µ "E-mail" –Ω–µ –ø—É—Å—Ç–æ–µ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É email-–∞–¥—Ä–µ—Å–∞
    if (!email) {
      setEmailError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É");
      isFormValid = false;
    } else {
      setEmailError("");
      // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ñ–æ—Ä–º–∞—Ç—É email-–∞–¥—Ä–µ—Å–∞ —Ç–æ–ª—å–∫–æ –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –ø–æ–ª–µ –Ω–µ –ø—É—Å—Ç–æ–µ
      if (!validateEmail(email)) {
        setEmailRegExpError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email-–∞–¥—Ä–µ—Å");
        setShowEmailError(true);
        isFormValid = false;
        setTimeout(() => {
          setShowEmailError(false);
        }, 3000);
      } else {
        setEmailRegExpError("");
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª–µ "–°–æ–æ–±—â–µ–Ω–∏–µ" –Ω–µ –ø—É—Å—Ç–æ–µ
    if (!message) {
      setMessageError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å");
      isFormValid = false;
    } else {
      setMessageError("");
    }

    if (isFormValid) {
      setIsSubmitted(true);

      const contactNumber = (Math.random() * 100000) | 0;

      const templateParams = {
        name,
        email,
        message,
        contact_number: contactNumber,
      };

      emailjs
        .send(SERVICE_ID, TEMPLATE_ID, templateParams, PUBLIC_KEY)
        .then((res) => {
          res.status === 200 && setName("");
          setEmail("");
          setMessage("");
          setIsSubmitted(false);
        })
        .catch((error) => {
          console.log("FAILED...", error);
        });
    }
  };

  return (
    <form
      id="contact-form"
      onSubmit={handleSubmit}
      className="contact-form"
      noValidate
    >
      <h3 className="contact-form__title">
        function{" "}
        <span className="highlighted-text-shadow">inviteAnInterview</span>() =
      </h3>
      <div className="contact-form__group-wrapper">
        <div className="contact-form__group mb-4">
          <label htmlFor="name" className="contact-form__label">
            –ò–º—è:
          </label>
          <input
            type="text"
            id="name"
            value={name}
            onChange={(e) => setName(e.target.value)}
            className="contact-form__input form-control"
            required
            placeholder={nameError}
            autoComplete="off"
          />
        </div>
        <div className="contact-form__group mb-4">
          <label htmlFor="email" className="contact-form__label">
            E-mail:
          </label>
          <input
            type="email"
            id="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            className="contact-form__input form-control"
            required
            placeholder={emailError}
          />
          {showEmailError && (
            <div className="contact-form__error-message">
              {emailRegExpError}
            </div>
          )}{" "}
        </div>
        <div className="contact-form__group mb-4">
          <label htmlFor="message" className="contact-form__label">
            –°–æ–æ–±—â–µ–Ω–∏–µ:
          </label>
          <textarea
            id="message-area"
            value={message}
            onChange={(e) => setMessage(e.target.value)}
            className="contact-form__input form-control"
            required
            placeholder={messageError}
            rows="3"
          ></textarea>
        </div>
        {isSubmitted ? (
          <button
            type="submit"
            className="contact-form__submit-btn btn btn-primary"
            disabled
            style={{ backgroundColor: "#98CE00", color: "#000", opacity: "1" }}
          >
            –°–ø–∞—Å–∏–±–æ! üñ§
          </button>
        ) : (
          <button
            type="submit"
            className="contact-form__submit-btn btn btn-primary"
          >
            –û—Ç–ø—Ä–∞–≤–∏—Ç—å
          </button>
        )}
      </div>
    </form>
  );
}

export default ContactForm;
